{
  "name": "grunt-browserify2",
  "description": "a grunt task that uses browserify v2 and optionally express",
  "version": "0.1.8",
  "homepage": "https://github.com/shanejonas/grunt-browserify2",
  "author": {
    "name": "Shane Jonas",
    "email": "jonas.shane@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/shanejonas/grunt-browserify2.git"
  },
  "bugs": {
    "url": "https://github.com/shanejonas/grunt-browserify2/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/shanejonas/grunt-browserify2/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.coffee",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "dependencies": {
    "browserify": "~2.14.0"
  },
  "readme": "# grunt-browserify2\n\n> a grunt task that uses browserify v2 and optionally express\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-browserify2 --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-browserify2');\n```\n\n## The \"browserify2\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `browserify2` to the data object passed into `grunt.initConfig()`.\nThis task is a now a MultiTask, which means it can run different tasks based on a namespace. ex:\n\n```js\ngrunt.initConfig({\n  browserify2: {\n    dev: {\n      entry: './build/entry.js',\n      mount: '/application.js',\n      server: './build/server.js',\n      debug: true\n    },\n    compile: {\n      entry: './build/entry.js',\n      compile: './public/application.js'\n    }\n  }\n});\ngrunt.loadNpmTasks('grunt-browserify2');\ngrunt.registerTask('default', 'browserify2:dev');\ngrunt.registerTask('compile', 'browserify2:compile');\n```\nrunning `grunt` will start your dev server and running `grunt compile`\nwill compile the build\n\n### Options\n\n#### entry\nType: `String`\nDefault value: `'.'`\n\nA string value that is used to determine the entry file for browserify\n\n#### mount\nType: `String`\nDefault value: `'.'`\n\nA string value that is used to determine where to mount your file in express.\n\n#### compile\nType: `String`\nDefault value: `'.'`\n\nA string value that is used to determine where to save your output file\nfrom browserify. if the `server` option is specified then it will create an\nexpress server and compile the file.\n\n#### beforeHook\nType: `Function`\nDefault value: `noop`\n\nA function that gets called with the browserify `bundle`. This is where\nyou should be using the new plugins for browserify v2.\n\nExample:\n```js\ngrunt.initConfig({\n  browserify2: {\n    main: {\n      entry: './build/entry.js',\n      compile: './public/application.js',\n      beforeHook: function(bundle){\n        bundle.transform(handleify)\n      }\n    }\n  }\n});\n\n```\n\n`browserify-shim` Example:\n```js\ngrunt.initConfig({\n  browserify2: {\n    main: {\n      entry: './build/entry.js',\n      compile: './public/application.js',\n      beforeHook: function(bundle){\n        shim(bundle, {zepto: path: './vendor/zepto', exports: 'Zepto'});\n      }\n    }\n  }\n});\n```\n\n#### afterHook\nType: `Function`\nDefault value: `noop`\n\nA function that gets called with the browserify `src`. This is where\nyou should be using minifiers etc.\n\nExample:\n```js\ngrunt.initConfig({\n  browserify2: {\n    dev: {\n      entry: './build/entry.js',\n      mount: '/application.js',\n      server: './build/server.js',\n      debug: true\n    }\n    compile: {\n      entry: './build/entry.js',\n      compile: './public/application.js',\n      afterHook: function(src){\n        var result = uglify.minify(src, {fromString: true});\n        return result.code;\n      }\n    }\n  }\n})\n```\n\n#### expose\nType: `Object`\nDefault value: `{}`\n\nAn object whose keys will become `require`able module names mapped to their values.\n\nExample:\n```js\nexpose: {\n  angular: './libs/angular/angular.js',\n  _: './libs/underscore.js'\n}\n```\n\nThis allows you to use `require('angular')` and `require('_')` in your modules, rather than having to \nprovide the relative paths.\n\n#### expose.files\nType: `Array`\nDefault value: `[]`\n\nAn array of file patterns that will be passed to `grunt.file.expandMapping()` to expose sets of files\nas simplified names/paths.\n\nExample:\n```js\nexpose: {\n  files: [\n  \t{\n\t\t\tcwd: './vendor/',\n\t\t\tsrc: ['**/*.js']\n\t\t}\n\t]\n}\n```\n\nThis would expose all `.js` files within the vendor directory, at any level, for `require`ing by name.\n\n```vendor/angular/angular.js``` becomes ```require('angular')```,\n```vendor/underscore.js``` becomes ```require('underscore')```, \netc.\n\nEach object in the files array must specify `cwd` and `src` properties, while `dest` is optional.\nFor example, adding ```dest: 'lib/'``` to the above would enable ```require(\"lib/angular\")```\n\n#### debug\nType: `Boolean`\nDefault value: `false`\n\nA boolean value that determines whether to include source maps for debugging\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n",
  "readmeFilename": "README.md",
  "_id": "grunt-browserify2@0.1.8",
  "dist": {
    "shasum": "bf606e4a62fa9be32fe2a39f7381637ef08f3238"
  },
  "_from": "grunt-browserify2@~0.1.8",
  "_resolved": "https://registry.npmjs.org/grunt-browserify2/-/grunt-browserify2-0.1.8.tgz"
}
